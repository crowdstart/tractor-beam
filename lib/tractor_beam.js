// Generated by CoffeeScript 1.9.3
var EventEmitter, TractorBeam;

require('../lib/polyfill.js');

EventEmitter = require('event-emitter');

TractorBeam = (function() {
  function TractorBeam(selector, options) {
    var base;
    this.selector = selector;
    this.options = options != null ? options : {};
    if ((base = this.options).type == null) {
      base.type = 'fileinput';
    }
    this.el = document.querySelector(this.selector);
    this.emitter = new EventEmitter;
    this.queue = [];
    this.bind();
  }

  TractorBeam.prototype.bind = function() {
    this.el.addEventListener('change', this.change);
    this.el.addEventListener('dragleave', this.dragHover);
    this.el.addEventListener('dragover', this.dragHover);
    this.el.addEventListener('drop', this.drop);
    return this.emitter.on('upload', function(queue) {
      var file, i, len, postPath, results;
      if (this.options.postPath == null) {
        return;
      }
      results = [];
      for (i = 0, len = queue.length; i < len; i++) {
        file = queue[i];
        postPath = typeof this.options.postPath === 'function' ? this.options.postPath(file) : this.options.postPath;
        results.push(console.log(file));
      }
      return results;
    });
  };

  TractorBeam.prototype.change = function() {
    if (this.getFilesAndDirectories == null) {
      return;
    }
    this.queue = [];
    this.getFilesAndDirectories().then((function(_this) {
      return function(filesAndDirs) {
        _this.iterateFilesAndDirs(filesAndDirs, '/');
      };
    })(this));
  };

  TractorBeam.prototype.dragHover = function(e) {
    e.stopPropagation();
    e.preventDefault();
  };

  TractorBeam.prototype.drop = function(e) {
    e.stopPropagation();
    e.preventDefault();
    if (e.dataTransfer.getFilesAndDirectories == null) {
      return;
    }
    return e.dataTransfer.getFilesAndDirectories().then((function(_this) {
      return function(filesAndDirs) {
        console.log(filesAndDirs);
        return _this.iterateFilesAndDirs(filesAndDirs, '/');
      };
    })(this));
  };

  TractorBeam.prototype.iterateFilesAndDirs = function(filesAndDirs, path) {
    var fd, file, i, len, results;
    if (filesAndDirs.length === 0) {
      this.emitter.emit('upload', this.queue);
      return;
    }
    results = [];
    for (i = 0, len = filesAndDirs.length; i < len; i++) {
      fd = filesAndDirs[i];
      if (typeof fd.getFilesAndDirectories === 'function') {
        path = fd.path;
        results.push(fd.getFilesAndDirectories().then((function(_this) {
          return function(subFilesAndDirs) {
            _this.iterateFilesAndDirs(subFilesAndDirs, path);
          };
        })(this)));
      } else {
        file = {
          fd: fd,
          path: path
        };
        this.emitter.emit('file', file);
        results.push(this.queue.push(file));
      }
    }
    return results;
  };

  return TractorBeam;

})();

module.exports = TractorBeam;

//# sourceMappingURL=tractor_beam.js.map
